[{"/Users/okamotoshun/folder/twitter_app/src/features/userSlice.ts":"1","/Users/okamotoshun/folder/twitter_app/src/app/store.ts":"2","/Users/okamotoshun/folder/twitter_app/src/App.tsx":"3","/Users/okamotoshun/folder/twitter_app/src/firebase.ts":"4","/Users/okamotoshun/folder/twitter_app/src/index.tsx":"5","/Users/okamotoshun/folder/twitter_app/src/components/auth/Auth.tsx":"6","/Users/okamotoshun/folder/twitter_app/src/components/feed/Feed.tsx":"7","/Users/okamotoshun/folder/twitter_app/src/components/feed/TweetInput.tsx":"8","/Users/okamotoshun/folder/twitter_app/src/components/feed/Post.tsx":"9"},{"size":882,"mtime":1609380047005,"results":"10","hashOfConfig":"11"},{"size":394,"mtime":1609317448710,"results":"12","hashOfConfig":"11"},{"size":1059,"mtime":1609389759604,"results":"13","hashOfConfig":"11"},{"size":744,"mtime":1609316562465,"results":"14","hashOfConfig":"11"},{"size":360,"mtime":1609338334917,"results":"15","hashOfConfig":"11"},{"size":9413,"mtime":1609381042845,"results":"16","hashOfConfig":"11"},{"size":1432,"mtime":1609395529273,"results":"17","hashOfConfig":"11"},{"size":3546,"mtime":1609393810892,"results":"18","hashOfConfig":"11"},{"size":4486,"mtime":1609396883852,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"37y30g",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"/Users/okamotoshun/folder/twitter_app/src/features/userSlice.ts",["43"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../app/store';\r\n\r\ninterface USER {\r\n  displayName: string;\r\n  photoUrl: string;\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: { uid: '', photoUrl: '', displayName: '' },\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = { uid: '', photoUrl: '', displayName: '' };\r\n    },\r\n    updateUserProfile: (state, action: PayloadAction<USER>) => {\r\n      state.user.displayName = action.payload.displayName;\r\n      state.user.photoUrl = action.payload.photoUrl;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout, updateUserProfile } = userSlice.actions;\r\n\r\nexport const selectUser = (state: RootState) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n",[],"/Users/okamotoshun/folder/twitter_app/src/app/store.ts",[],"/Users/okamotoshun/folder/twitter_app/src/App.tsx",[],"/Users/okamotoshun/folder/twitter_app/src/firebase.ts",[],"/Users/okamotoshun/folder/twitter_app/src/index.tsx",[],"/Users/okamotoshun/folder/twitter_app/src/components/auth/Auth.tsx",["44","45","46"],"import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styles from './Auth.module.css';\nimport { updateUserProfile } from '../../features/userSlice';\nimport { auth, provider, storage } from '../../firebase';\n\nimport {\n  Avatar,\n  Button,\n  CssBaseline,\n  TextField,\n  Paper,\n  Grid,\n  Typography,\n  makeStyles,\n  Modal,\n  IconButton,\n  Box,\n} from '@material-ui/core';\n\nimport SendIcon from '@material-ui/icons/Send';\nimport CameraIcon from '@material-ui/icons/Camera';\nimport EmailIcon from '@material-ui/icons/Email';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1608813528399-8748f738a1df?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1001&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light'\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  modal: {\n    outline: 'none',\n    position: 'absolute',\n    width: 400,\n    borderRadius: 10,\n    backgroundColor: 'white',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(10),\n  },\n}));\n\nconst Auth: React.FC = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [username, setUsername] = useState('');\n  const [avatarImage, setAvatarImage] = useState<File | null>(null);\n  const [isLogin, setIsLogin] = useState(true);\n  const [openModal, setOpenModal] = useState(false);\n  const [resetEmail, setResetEmail] = useState('');\n\n  const sendResetEmail = async (e: React.MouseEvent<HTMLElement>) => {\n    await auth\n      .sendPasswordResetEmail(resetEmail)\n      .then(() => {\n        setOpenModal(false);\n        setResetEmail('');\n      })\n      .catch((err) => {\n        alert(err.message);\n        setResetEmail('');\n      });\n  };\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setAvatarImage(e.target.files![0]);\n      e.target.value = '';\n    }\n  };\n  const signInEmail = async () => {\n    await auth.signInWithEmailAndPassword(email, password);\n  };\n\n  const signUpEmail = async () => {\n    const authUser = await auth.createUserWithEmailAndPassword(email, password);\n    let url = '';\n    if (avatarImage) {\n      const S =\n        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n      const N = 16;\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(N)))\n        .map((n) => S[n % S.length])\n        .join('');\n      const fileName = randomChar + '_' + avatarImage.name;\n      await storage.ref(`avatars/${fileName}`).put(avatarImage);\n      url = await storage.ref('avatars').child(fileName).getDownloadURL();\n    }\n    await authUser.user?.updateProfile({\n      displayName: username,\n      photoURL: url,\n    });\n    dispatch(\n      updateUserProfile({\n        displayName: username,\n        photoUrl: url,\n      })\n    );\n  };\n\n  const signInGoogle = async () => {\n    await auth.signInWithPopup(provider).catch((err) => alert(err.messa));\n  };\n\n  return (\n    <Grid container component='main' className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component='h1' variant='h5'>\n            {isLogin ? 'Login' : 'Register'}\n          </Typography>\n          <form className={classes.form} noValidate>\n            {!isLogin && (\n              <>\n                <TextField\n                  variant='outlined'\n                  margin='normal'\n                  required\n                  fullWidth\n                  id='username'\n                  label='Username'\n                  name='username'\n                  autoComplete='username'\n                  autoFocus\n                  value={username}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setUsername(e.target.value);\n                  }}\n                />\n                <Box textAlign='center'>\n                  <IconButton>\n                    <label>\n                      <AccountCircleIcon\n                        fontSize='large'\n                        className={\n                          avatarImage\n                            ? styles.login_addIconLoaded\n                            : styles.login_addIcon\n                        }\n                      />\n                      <input\n                        className={styles.login_hiddenIcon}\n                        type='file'\n                        onChange={onChangeImageHandler}\n                      />\n                    </label>\n                  </IconButton>\n                </Box>\n              </>\n            )}\n            <TextField\n              variant='outlined'\n              margin='normal'\n              required\n              fullWidth\n              id='email'\n              label='Email Address'\n              name='email'\n              autoComplete='email'\n              value={email}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setEmail(e.target.value);\n              }}\n            />\n            <TextField\n              variant='outlined'\n              margin='normal'\n              required\n              fullWidth\n              name='password'\n              label='Password'\n              type='password'\n              id='password'\n              autoComplete='current-password'\n              value={password}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setPassword(e.target.value);\n              }}\n            />\n\n            <Button\n              disabled={\n                isLogin\n                  ? !email || password.length < 6\n                  : !username || !email || password.length < 6 || !avatarImage\n              }\n              fullWidth\n              variant='contained'\n              color='primary'\n              className={classes.submit}\n              startIcon={<EmailIcon />}\n              onClick={\n                isLogin\n                  ? async () => {\n                      try {\n                        await signInEmail();\n                      } catch (err) {\n                        alert(err.message);\n                      }\n                    }\n                  : async () => {\n                      try {\n                        await signUpEmail();\n                      } catch (err) {\n                        alert(err.message);\n                      }\n                    }\n              }>\n              {isLogin ? 'Login' : 'Register'}\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <span\n                  onClick={() => setOpenModal(true)}\n                  className={styles.login_reset}>\n                  Forgot password ?\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  className={styles.login_toggleMode}\n                  onClick={() => setIsLogin(!isLogin)}>\n                  {isLogin ? 'Create new account ?' : 'Back to login'}\n                </span>\n              </Grid>\n            </Grid>\n\n            <Button\n              fullWidth\n              variant='contained'\n              color='default'\n              className={classes.submit}\n              startIcon={<CameraIcon />}\n              onClick={signInGoogle}>\n              SignIn with Google\n            </Button>\n          </form>\n          <Modal open={openModal} onClose={() => setOpenModal(false)}>\n            <div style={getModalStyle()} className={classes.modal}>\n              <div className={styles.login_modal}>\n                <TextField\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  type='email'\n                  name='email'\n                  label='Reset E-mail'\n                  value={resetEmail}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setResetEmail(e.target.value);\n                  }}\n                />\n                <IconButton onClick={sendResetEmail}>\n                  <SendIcon />\n                </IconButton>\n              </div>\n            </div>\n          </Modal>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Auth;\n","/Users/okamotoshun/folder/twitter_app/src/components/feed/Feed.tsx",[],"/Users/okamotoshun/folder/twitter_app/src/components/feed/TweetInput.tsx",["47","48"],"import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../../features/userSlice';\nimport styles from './TweetInput.module.css';\nimport { auth, db, storage } from '../../firebase';\nimport { Avatar, Button, IconButton } from '@material-ui/core';\nimport firebase from 'firebase/app';\nimport AddPhotoIcon from '@material-ui/icons/AddAPhoto';\n\nconst TweetInput: React.FC = () => {\n  const user = useSelector(selectUser);\n\n  const [tweetImage, setTweetImage] = useState<File | null>(null);\n  const [tweetMsg, setTweetMsg] = useState('');\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setTweetImage(e.target.files![0]);\n      e.target.value = '';\n    }\n  };\n\n  const sendTweet = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (tweetImage) {\n      const S =\n        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n      const N = 16;\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(N)))\n        .map((n) => S[n % S.length])\n        .join('');\n      const fileName = randomChar + '_' + tweetImage.name;\n      const uploadTweetImg = storage.ref(`images/${fileName}`).put(tweetImage);\n      uploadTweetImg.on(\n        firebase.storage.TaskEvent.STATE_CHANGED,\n        () => {\n          null;\n        },\n        (err) => {\n          alert(err.message);\n        },\n        async () => {\n          await storage\n            .ref('images')\n            .child(fileName)\n            .getDownloadURL()\n            .then(async (url) => {\n              await db.collection('posts').add({\n                avatar: user.photoUrl,\n                image: url,\n                text: tweetMsg,\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                username: user.displayName,\n              });\n            });\n        }\n      );\n    } else {\n      db.collection('posts').add({\n        avatar: user.photoUrl,\n        image: '',\n        text: tweetMsg,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        username: user.displayName,\n      });\n    }\n    setTweetImage(null);\n    setTweetMsg('');\n  };\n\n  return (\n    <>\n      <form onSubmit={sendTweet}>\n        <div className={styles.tweet_form}>\n          <Avatar\n            className={styles.tweet_avatar}\n            src={user.photoUrl}\n            onClick={async () => {\n              await auth.signOut();\n            }}\n          />\n          <input\n            className={styles.tweet_input}\n            placeholder=\"Wha'ts happening\"\n            type='text'\n            autoFocus\n            value={tweetMsg}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setTweetMsg(e.target.value)\n            }\n          />\n          <IconButton>\n            <label>\n              <AddPhotoIcon\n                className={\n                  tweetImage ? styles.tweet_addIconLoaded : styles.tweet_addIcon\n                }\n              />\n              <input\n                className={styles.tweet_hiddenIcon}\n                type='file'\n                onChange={onChangeImageHandler}\n              />\n            </label>\n          </IconButton>\n        </div>\n        <Button\n          type='submit'\n          disabled={!tweetMsg}\n          className={\n            tweetMsg ? styles.tweet_sendBtn : styles.tweet_sendDisableBtn\n          }>\n          Tweet\n        </Button>\n      </form>\n    </>\n  );\n};\n\nexport default TweetInput;\n","/Users/okamotoshun/folder/twitter_app/src/components/feed/Post.tsx",["49","50"],"import React, { useState, useEffect } from 'react';\nimport styles from './Post.module.css';\nimport { db } from '../../firebase';\nimport firebase from 'firebase/app';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../../features/userSlice';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MessageIcon from '@material-ui/icons/Message';\nimport SendIcon from '@material-ui/icons/Send';\n\ninterface PROPS {\n  postId: string;\n  avatar: string;\n  image: string;\n  text: string;\n  timestamp: any;\n  username: string;\n}\n\ninterface COMMENT {\n  id: string;\n  avatar: string;\n  text: string;\n  timestamp: any;\n  username: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  small: {\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n    marginRight: theme.spacing(1),\n  },\n}));\n\nconst Post: React.FC<PROPS> = (props) => {\n  const classes = useStyles();\n  const user = useSelector(selectUser);\n  const [openComments, setOpenComments] = useState(false);\n  const [comment, setComment] = useState('');\n  const [comments, setComments] = useState<COMMENT[]>([\n    {\n      id: '',\n      avatar: '',\n      text: '',\n      username: '',\n      timestamp: null,\n    },\n  ]);\n\n  useEffect(() => {\n    const unSub = db\n      .collection('posts')\n      .doc(props.postId)\n      .collection('comments')\n      .orderBy('timestamp', 'desc')\n      .onSnapshot((snapshot) => {\n        setComments(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            avatar: doc.data().avatar,\n            text: doc.data().text,\n            username: doc.data().username,\n            timestamp: doc.data().timestamp,\n          }))\n        );\n      });\n\n    return () => {\n      unSub();\n    };\n  }, [props.postId]);\n\n  const newComment = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    db.collection('posts').doc(props.postId).collection('comments').add({\n      avatar: user.photoUrl,\n      text: comment,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      username: user.displayName,\n    });\n    setComment('');\n  };\n  return (\n    <div className={styles.post}>\n      <div className={styles.post_avatar}>\n        <Avatar src={props.avatar} />\n      </div>\n      <div className={styles.post_body}>\n        <div>\n          <div className={styles.post_header}>\n            <h3>\n              <span className={styles.post_headerUser}>@{props.username}</span>\n              <span className={styles.post_headerTime}>\n                {new Date(props.timestamp?.toDate()).toLocaleString()}\n              </span>\n            </h3>\n          </div>\n          <div className={styles.post_tweet}>\n            <p>{props.text}</p>\n          </div>\n        </div>\n        {props.image && (\n          <div className={styles.post_tweetImage}>\n            <img src={props.image} alt='tweet' />\n          </div>\n        )}\n\n        <MessageIcon\n          className={styles.post_commentIcon}\n          onClick={() => setOpenComments(!openComments)}\n        />\n\n        {openComments && (\n          <>\n            {comments.map((com) => (\n              <div key={com.id} className={styles.post_comment}>\n                <Avatar src={com.avatar} className={classes.small} />\n\n                <span className={styles.post_commentUser}>@{com.username}</span>\n                <span className={styles.post_commentText}>{com.text} </span>\n                <span className={styles.post_headerTime}>\n                  {new Date(com.timestamp?.toDate()).toLocaleString()}\n                </span>\n              </div>\n            ))}\n\n            <form onSubmit={newComment}>\n              <div className={styles.post_form}>\n                <input\n                  className={styles.post_input}\n                  type='text'\n                  placeholder='Type new comment...'\n                  value={comment}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setComment(e.target.value)\n                  }\n                />\n                <button\n                  disabled={!comment}\n                  className={\n                    comment ? styles.post_button : styles.post_buttonDisable\n                  }\n                  type='submit'>\n                  <SendIcon className={styles.post_sendIcon} />\n                </button>\n              </div>\n            </form>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n",{"ruleId":"51","severity":1,"message":"52","line":30,"column":27,"nodeType":"53","messageId":"54","endLine":30,"endColumn":48},{"ruleId":"55","severity":1,"message":"56","line":93,"column":33,"nodeType":"57","messageId":"58","endLine":93,"endColumn":65},{"ruleId":"59","severity":1,"message":"60","line":107,"column":9,"nodeType":"61","messageId":"62","endLine":107,"endColumn":24,"suggestions":"63"},{"ruleId":"59","severity":1,"message":"60","line":108,"column":22,"nodeType":"61","messageId":"62","endLine":108,"endColumn":37,"suggestions":"64"},{"ruleId":"59","severity":1,"message":"60","line":17,"column":9,"nodeType":"61","messageId":"62","endLine":17,"endColumn":24,"suggestions":"65"},{"ruleId":"59","severity":1,"message":"60","line":18,"column":21,"nodeType":"61","messageId":"62","endLine":18,"endColumn":36,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":17,"column":14,"nodeType":"69","messageId":"70","endLine":17,"endColumn":17,"suggestions":"71"},{"ruleId":"67","severity":1,"message":"68","line":25,"column":14,"nodeType":"69","messageId":"70","endLine":25,"endColumn":17,"suggestions":"72"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'e' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["73"],["74"],["75"],["76"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["77","78"],["79","80"],{"messageId":"81","fix":"82","desc":"83"},{"messageId":"81","fix":"84","desc":"83"},{"messageId":"81","fix":"85","desc":"83"},{"messageId":"81","fix":"86","desc":"83"},{"messageId":"87","fix":"88","desc":"89"},{"messageId":"90","fix":"91","desc":"92"},{"messageId":"87","fix":"93","desc":"89"},{"messageId":"90","fix":"94","desc":"92"},"suggestOptionalChain",{"range":"95","text":"96"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"97","text":"96"},{"range":"98","text":"96"},{"range":"99","text":"96"},"suggestUnknown",{"range":"100","text":"101"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"100","text":"102"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"103","text":"101"},{"range":"103","text":"102"},[2807,2808],"?.",[2850,2851],[689,690],[731,732],[566,569],"unknown","never",[675,678]]